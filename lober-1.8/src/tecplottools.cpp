
#include <stdlib.h>
#include <string.h>
#include "tecplottools.h"

int setUpData(FILE *in, int *nx, int *ny, int *nVar, double ***d) {
	// reads the datafile title and extract nx, ny, nVar, data
	static int nCall=1;
	char *line=NULL;
	int i,j,k;
	double f;

	if (in==NULL) {
		printf("  ***resetting setUpData()\n");
		nCall=1;
	}

	printf("  ***entering setUpData() nCall=%i\n",nCall);


	if (*d!=NULL) {
		//free memory
		//printf("  ***clearing mem\n");
		for (i=0;i<*nx;i++) {
			free((*d)[i]);
		}
		free(*d);
		//printf("  ***done\n");
	}

	if (nCall==1) {
		printf("  ***reading title\n");
		if (getLine(in,&line)) {
			printf("  ***error generated by getLine\n");
			return(1);
		}
		//printf("line=%s\n",line);
		printf("  ***DataSetTitle=%sEOL\n",line);
		*nVar=TecTitle2nVar(line);
		if (*nVar<0) {
			printf("  ***error generated by TecTitle2nVar\n");
			return(1);
		}
		printf("  ***there are %i variables loaded, last one used\n",*nVar);
	}

	printf("  ***reading zone header\n");
	if (getLine(in,&line)) {
		printf("  ***error generated by getLine\n");
		return(1);
	}
	printf("  ***ZoneHeader=%sEOL\n",line);
	if (TecZone2IJ(nx,ny,line)<0) {
		printf("  ***error generated by TecZone2IJ\n");
		return(1);
	}
	printf("  ***Zone size=%ix%i\n",*nx,*ny);	

	// allocate memory
	*d=(double **)malloc(*nx*sizeof(double *));
	for (i=0;i<*nx;i++) {
		(*d)[i]=(double *)malloc(*ny*sizeof(double));
	}

	//fill memory
	for (j=0;j<*ny;j++) {
		for (i=0;i<*nx;i++) {
			//printf("%i,%i:",i,j);
			for (k=0;k<*nVar;k++) {
				fscanf(in,"%lf",&f);
				//printf("%f ",f);
			}
			//printf("\n");
			(*d)[j][i]=f;
		}
	}

	//flush line
	getLine(in,&line);
	free(line);
	line=NULL;

	nCall++;
	return(0);
}

int TecZone2IJ(int *nx, int *ny, char *title) {
	// extract the number of variables from the title line of the data set
	int cpos;
	int npos;
	int count=0;
	int memo;
	char *txt;
	int i;

	//first, we need to fine the kwd "ZONE"
	memo=3;
	*nx=99;
	if ((cpos=strFind(title," I="))<0) {
		memo=4;
		if ((cpos=strFind(title," I ="))<0) {
		  //printf("TecZone2IJ::cannot find \"I=\" keyword\n");
		  //printf("TecZone2IJ::set nx to -1\n");
			*nx=-1;
			//return(-1);
		}
	}

	if (*nx>0) {
	  //next, we find the next NON-occurence of ' '
	  if ((cpos=strNotNFind(cpos+memo,title,' '))<0) {
	    printf("TecZone2IJ::cannot find anything after \"I=\"\n");
	    return(-1);
	  }
	  
	  //printf("tag strating at %i\n",cpos);
	  
	  //then, we find the next space
	  if ((npos=strNFind(cpos+1,title," "))<0) {
	    npos=strlen(title);
	  }
	  npos--;
	  
	  //printf("looking between %i and %i\n",cpos,npos);
	  
	  txt=(char *)malloc((npos-cpos+2)*sizeof(char));
	  for (i=cpos;i<=npos;i++) {
	    txt[i-cpos]=title[i];
	  }
	  txt[npos-cpos+1]='\0';
	  //printf("I=q%sq\n",txt);
	  *nx=atoi(txt);
	  //printf("nx=%i\n",*nx);
	  free(txt);
	}

	//now the same for J
	memo=3;
	*ny=99;
	if ((cpos=strFind(title," J="))<0) {
		memo=4;
		if ((cpos=strFind(title," J ="))<0) {
		  //printf("TecZone2IJ::cannot find \"J=\" keyword\n");
		  //printf("TecZone2IJ::set ny to 1\n");
			*ny=-1;
			//return(-1);
		}
	}

	if (*ny>0) {
	  //next, we find the next NON-occurence of ' '
	  if ((cpos=strNotNFind(cpos+memo,title,' '))<0) {
	    printf("TecZone2IJ::cannot find anything after \"J=\"\n");
	    return(-1);
	  }
	  
	  //printf("tag strating at %i\n",cpos);
	  
	  //then, we find the next space
	  if ((npos=strNFind(cpos+1,title," "))<0) {
	    npos=strlen(title);
	  }
	  npos--;
	  
	  //printf("looking between %i and %i\n",cpos,npos);
	  
	  txt=(char *)malloc((npos-cpos+2)*sizeof(char));
	  for (i=cpos;i<=npos;i++) {
	    txt[i-cpos]=title[i];
	  }
	  txt[npos-cpos+1]='\0';
	  //printf("J=q%sq\n",txt);
	  *ny=atoi(txt);
	  //printf("ny=%i\n",*nx);
	  free(txt);
	} else {
	  *ny=1;
	}

	return(0);
}

int TecTitle2nVar(char *title) {
	// extract the number of variables from the title line of the data set
	int cpos;
	int npos;
	int count=0;

	//first, we need to fine the kwd "VARIABLES="
	if ((cpos=strFind(title,"VARIABLES"))<0) {
		printf("TecTitle2nVar::cannot find \"VARIABLES\" keyword\n");
		return(-1);
	}

	//next, we find the next occurence of =
	if ((cpos=strNFind(cpos+9,title,"="))<0) {
		printf("TecTitle2nVar::cannot find \"VARIABLES =\"keyword\n");
		return(-1);
	}

	//then, we find the next keyword
	if ((npos=strNFind(cpos+1,title,"="))<0) {
		npos=strlen(title);
	}
	cpos++;
	npos--;

	//basically, we count the number of " between cpos and npos
	//printf("looking between %i and %i\n",cpos,npos);
	while (cpos<=npos) {
		if (title[cpos]=='\"') {
			count++;
		}
		cpos++;
	}
	//printf("count=%i\n",count);

	if (count<=0) {
		printf("TecTitle2nVar::error cannot find \"\n");
		return(-1);
	}
	if (2*(count/2)==count) {
		return(count/2);
	} else {
		printf("TecTitle2nVar::error there are %f variables!!!\n",count/2.0);
		return(-1);
	}

	return(-1);
}

int strFind(char *s1, char *s2) {
	//find the first occurence of s2 in s1
	//returns -1 if not found
	return(strNFind(0,s1,s2));
}

int strNFind(int shift,char *s1, char *s2) {
	// find the first occurence of s2 after the first shift char of s1
	// returns -1 if not found
	int ls2;
	int ls1;
	int p1=shift, p2=0;

	ls1=strlen(s1);
	ls2=strlen(s2);

	//printf("len=%i,%i\n",ls1,ls2);

	while ((p1+p2<ls1)&&(p2<ls2)) {
		//printf("p1=%i,p2=%i\n",p1,p2);
		if (s1[p1+p2]==s2[p2]) {
			//continue with next char in s2
			p2++;
		} else {
			//reset and move in s1;
			p1++;
			p2=0;
		}
	}

	if (p2==ls2) {
		//found
		return(p1);
	} else {
		//not found
		return(-1);
	}

}

int strNotNFind(int shift,char *s1, char s2) {
	// find the first NON-occurence of s2 after the first shift char of s1
	// returns -1 if not found
	int ls1;
	int p1=shift;
	int found=-1;

	ls1=strlen(s1);
	
	while ((found==-1)&&(p1<ls1)) {
		if (s1[p1]!=s2) {
			found=p1;
		}
		p1++;
	}

	return(found);

}

int getLine(FILE *file, char **lne) {
	// reads next line in file and stores it in lne
	char c;
	int lng;
	int actlng;

	//clear lne;
	if (*lne!=NULL) {
		//printf("getLine::clearing line\n");
		free(*lne);
		//printf("getLine::okay\n");
	}

	//init lne;
	*lne=(char *)malloc(getLineSegmLng*sizeof(char));
	lng=getLineSegmLng;
	actlng=0;

	//reads line
	c=(char)fgetc(file);
	//printf("char:%c\n",c);
	while ((c!=getLineEOL)&&(!feof(file))) {
		(*lne)[actlng]=c;
		actlng++;
		if (actlng>=lng) {
			// needs to extend memory in line
			//printf("getLine::resizing line...");
			if ((*lne=(char *)realloc(*lne,lng+getLineSegmLng*sizeof(char)))==NULL) {
				printf("getLine::Out of Memory!\n");
				return(1);
			}
			//printf("OK!\n");
			lng+=getLineSegmLng;
		}
		c=(char)fgetc(file);
		//printf("char:%c\n",c);
	}
	(*lne)[actlng]='\0';
	return(0);
}
